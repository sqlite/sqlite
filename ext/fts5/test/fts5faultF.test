# 2023 July 20
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share freely, never taking more than you give.
#
#*************************************************************************
#
# This file is focused on OOM errors. Particularly those that may occur
# when using contentless_delete=1 databases.
#

source [file join [file dirname [info script]] fts5_common.tcl]
source $testdir/malloc_common.tcl
set testprefix fts5faultF

# If SQLITE_ENABLE_FTS5 is not defined, omit this file.
ifcapable !fts5 {
  finish_test
  return
}

faultsim_save_and_close
do_faultsim_test 1 -prep {
  faultsim_restore_and_reopen
} -body {
  execsql { 
    CREATE VIRTUAL TABLE t1 USING fts5(x, y, content=, contentless_delete=1) 
  }
} -test {
  faultsim_test_result {0 {}} {1 {vtable constructor failed: t1}} 
}

reset_db
do_execsql_test 2.0 {
  CREATE VIRTUAL TABLE t1 USING fts5(doc, content=, contentless_delete=1);
  BEGIN;
    INSERT INTO t1(rowid, doc) VALUES(1, 'a b c d');
    INSERT INTO t1(rowid, doc) VALUES(2, 'a b c d');
    INSERT INTO t1(rowid, doc) VALUES(3, 'a b c d');
    INSERT INTO t1(rowid, doc) VALUES(4, 'a b c d');
  COMMIT;
  DELETE FROM t1 WHERE rowid IN (2, 4);
}

do_faultsim_test 2 -prep {
  sqlite3 db test.db
  execsql { SELECT rowid FROM t1 }
} -body {
  execsql { 
    SELECT rowid FROM t1('b c');
  }
} -test {
  faultsim_test_result {0 {1 3}}
}

#-------------------------------------------------------------------------
reset_db
do_execsql_test 3.0 {
  CREATE VIRTUAL TABLE t1 USING fts5(doc, content=, contentless_delete=1);
  BEGIN;
    INSERT INTO t1(rowid, doc) VALUES(1, 'a b c d');
    INSERT INTO t1(rowid, doc) VALUES(2, 'a b c d');
    INSERT INTO t1(rowid, doc) VALUES(3, 'a b c d');
    INSERT INTO t1(rowid, doc) VALUES(4, 'a b c d');
  COMMIT;
}

faultsim_save_and_close
do_faultsim_test 3 -prep {
  faultsim_restore_and_reopen
  execsql { SELECT rowid FROM t1 }
} -body {
  execsql { 
    INSERT INTO t1(rowid, doc) VALUES(5, 'a b c d');
  }
} -test {
  faultsim_test_result {0 {}}
}

#-------------------------------------------------------------------------
reset_db
do_execsql_test 4.0 {
  CREATE VIRTUAL TABLE t1 USING fts5(doc, content=, contentless_delete=1);
  INSERT INTO t1(t1, rank) VALUES('pgsz', 64);
  WITH s(i) AS (
    SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<1000
  )
  INSERT INTO t1(rowid, doc) SELECT i, 'a b c d' FROM s;
}

do_execsql_test 4.1 { DELETE FROM t1 WHERE rowid <= 25 }

faultsim_save_and_close
do_faultsim_test 4 -faults oom-t* -prep {
  faultsim_restore_and_reopen
  execsql { SELECT rowid FROM t1 }
} -body {
  execsql { 
    DELETE FROM t1 WHERE rowid < 100
  }
} -test {
  faultsim_test_result {0 {}}
}


finish_test

